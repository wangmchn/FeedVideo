//
//  FVMultipleDelegates.m
//  FeedVideo
//
//  Created by Mark on 2019/9/27.
//  Copyright Â© 2019 Tencent.Inc. All rights reserved.
//

#import "FVMultipleDelegates.h"

static inline void fv_enumerateUsingBlock(NSHashTable *delegates, void (^block)(id delegate, BOOL * _Nonnull stop)) {
    NSArray *delegateList = [delegates allObjects];
    [delegateList enumerateObjectsUsingBlock:^(id  _Nonnull obj, NSUInteger idx, BOOL * _Nonnull stop) {
        block(obj, stop);
    }];
}

@interface FVMultipleDelegates ()

@property (nonatomic, strong) NSHashTable *delegates;

@end

@implementation FVMultipleDelegates

- (NSHashTable *)delegates {
    if (!_delegates) {
        _delegates = [NSHashTable weakObjectsHashTable];
    }
    return _delegates;
}

- (void)addDelegate:(id)delegate {
    if (!delegate || [self.delegates containsObject:delegate]) {
        return;
    }
    [self.delegates addObject:delegate];
}

- (void)removeDelegate:(id)delegate {
    if (!delegate || ![self.delegates containsObject:delegate]) {
        return;
    }
    [self.delegates removeObject:delegate];
}

- (BOOL)containsDelegate:(id)aDelegate {
    if (!aDelegate) {
        return NO;
    }
    return [self.delegates containsObject:aDelegate];
}

#pragma mark - UIScrollViewDelegate
- (void)scrollViewDidScrollToTop:(UIScrollView *)scrollView {
    if ([self.mainTarget respondsToSelector:@selector(scrollViewDidScrollToTop:)]) {
        [(id<UIScrollViewDelegate>)self.mainTarget scrollViewDidScrollToTop:scrollView];
    }
    fv_enumerateUsingBlock(self.delegates, ^(id<UIScrollViewDelegate> delegate, BOOL * _Nonnull stop) {
        if ([delegate respondsToSelector:@selector(scrollViewDidScrollToTop:)]) {
            [delegate scrollViewDidScrollToTop:scrollView];
        }
    });
}

- (void)scrollViewDidEndDecelerating:(UIScrollView *)scrollView {
    if ([self.mainTarget respondsToSelector:@selector(scrollViewDidEndDecelerating:)]) {
        [(id<UIScrollViewDelegate>)self.mainTarget scrollViewDidEndDecelerating:scrollView];
    }
    fv_enumerateUsingBlock(self.delegates, ^(id<UIScrollViewDelegate> delegate, BOOL * _Nonnull stop) {
        if ([delegate respondsToSelector:@selector(scrollViewDidEndDecelerating:)]) {
            [delegate scrollViewDidEndDecelerating:scrollView];
        }
    });
}

- (void)scrollViewDidEndDragging:(UIScrollView *)scrollView willDecelerate:(BOOL)decelerate {
    if ([self.mainTarget respondsToSelector:@selector(scrollViewDidEndDragging:willDecelerate:)]) {
        [(id<UIScrollViewDelegate>)self.mainTarget scrollViewDidEndDragging:scrollView willDecelerate:decelerate];
    }
    fv_enumerateUsingBlock(self.delegates, ^(id<UIScrollViewDelegate> delegate, BOOL * _Nonnull stop) {
        if ([delegate respondsToSelector:@selector(scrollViewDidEndDragging:willDecelerate:)]) {
            [delegate scrollViewDidEndDragging:scrollView willDecelerate:decelerate];
        }
    });
}

- (void)scrollViewDidEndScrollingAnimation:(UIScrollView *)scrollView {
    if ([self.mainTarget respondsToSelector:@selector(scrollViewDidEndScrollingAnimation:)]) {
        [(id<UIScrollViewDelegate>)self.mainTarget scrollViewDidEndScrollingAnimation:scrollView];
    }
    fv_enumerateUsingBlock(self.delegates, ^(id<UIScrollViewDelegate> delegate, BOOL * _Nonnull stop) {
        if ([delegate respondsToSelector:@selector(scrollViewDidEndScrollingAnimation:)]) {
            [delegate scrollViewDidEndScrollingAnimation:scrollView];
        }
    });
}

#pragma mark - UITableViewDelegate
- (void)tableView:(UITableView *)tableView willDisplayHeaderView:(UIView *)view forSection:(NSInteger)section {
    if ([self.mainTarget respondsToSelector:@selector(tableView:willDisplayHeaderView:forSection:)]) {
        [(id<UITableViewDelegate>)self.mainTarget tableView:tableView willDisplayHeaderView:view forSection:section];
    }
    fv_enumerateUsingBlock(self.delegates, ^(id<UITableViewDelegate> delegate, BOOL * _Nonnull stop) {
        if ([delegate respondsToSelector:@selector(tableView:willDisplayHeaderView:forSection:)]) {
            [delegate tableView:tableView willDisplayHeaderView:view forSection:section];
        }
    });
}

- (void)tableView:(UITableView *)tableView willDisplayFooterView:(UIView *)view forSection:(NSInteger)section {
    if ([self.mainTarget respondsToSelector:@selector(tableView:willDisplayFooterView:forSection:)]) {
        [(id<UITableViewDelegate>)self.mainTarget tableView:tableView willDisplayFooterView:view forSection:section];
    }
    fv_enumerateUsingBlock(self.delegates, ^(id<UITableViewDelegate> delegate, BOOL * _Nonnull stop) {
        if ([delegate respondsToSelector:@selector(tableView:willDisplayFooterView:forSection:)]) {
            [delegate tableView:tableView willDisplayFooterView:view forSection:section];
        }
    });
}

- (void)tableView:(UITableView *)tableView willDisplayCell:(UITableViewCell *)cell forRowAtIndexPath:(NSIndexPath *)indexPath {
    if ([self.mainTarget respondsToSelector:@selector(tableView:willDisplayCell:forRowAtIndexPath:)]) {
        [(id<UITableViewDelegate>)self.mainTarget tableView:tableView willDisplayCell:cell forRowAtIndexPath:indexPath];
    }
    fv_enumerateUsingBlock(self.delegates, ^(id<UITableViewDelegate> delegate, BOOL * _Nonnull stop) {
        if ([delegate respondsToSelector:@selector(tableView:willDisplayCell:forRowAtIndexPath:)]) {
            [delegate tableView:tableView willDisplayCell:cell forRowAtIndexPath:indexPath];
        }
    });
}

- (void)tableView:(UITableView *)tableView didEndDisplayingCell:(UITableViewCell *)cell forRowAtIndexPath:(NSIndexPath *)indexPath {
    if ([self.mainTarget respondsToSelector:@selector(tableView:didEndDisplayingCell:forRowAtIndexPath:)]) {
        [(id<UITableViewDelegate>)self.mainTarget tableView:tableView didEndDisplayingCell:cell forRowAtIndexPath:indexPath];
    }
    fv_enumerateUsingBlock(self.delegates, ^(id<UITableViewDelegate> delegate, BOOL * _Nonnull stop) {
        if ([delegate respondsToSelector:@selector(tableView:didEndDisplayingCell:forRowAtIndexPath:)]) {
            [delegate tableView:tableView didEndDisplayingCell:cell forRowAtIndexPath:indexPath];
        }
    });
}

- (void)tableView:(UITableView *)tableView didEndDisplayingFooterView:(UIView *)view forSection:(NSInteger)section {
    if ([self.mainTarget respondsToSelector:@selector(tableView:didEndDisplayingFooterView:forSection:)]) {
        [(id<UITableViewDelegate>)self.mainTarget tableView:tableView didEndDisplayingFooterView:view forSection:section];
    }
    fv_enumerateUsingBlock(self.delegates, ^(id<UITableViewDelegate> delegate, BOOL * _Nonnull stop) {
        if ([delegate respondsToSelector:@selector(tableView:didEndDisplayingFooterView:forSection:)]) {
            [delegate tableView:tableView didEndDisplayingFooterView:view forSection:section];
        }
    });
}

- (void)tableView:(UITableView *)tableView didEndDisplayingHeaderView:(UIView *)view forSection:(NSInteger)section {
    if ([self.mainTarget respondsToSelector:@selector(tableView:didEndDisplayingHeaderView:forSection:)]) {
        [(id<UITableViewDelegate>)self.mainTarget tableView:tableView didEndDisplayingHeaderView:view forSection:section];
    }
    fv_enumerateUsingBlock(self.delegates, ^(id<UITableViewDelegate> delegate, BOOL * _Nonnull stop) {
        if ([delegate respondsToSelector:@selector(tableView:didEndDisplayingHeaderView:forSection:)]) {
            [delegate tableView:tableView didEndDisplayingHeaderView:view forSection:section];
        }
    });
}

#pragma mark - UICollectionViewDelegate
- (void)collectionView:(UICollectionView *)collectionView willDisplayCell:(UICollectionViewCell *)cell forItemAtIndexPath:(NSIndexPath *)indexPath {
    if ([self.mainTarget respondsToSelector:@selector(collectionView:willDisplayCell:forItemAtIndexPath:)]) {
        [(id<UICollectionViewDelegate>)self.mainTarget collectionView:collectionView willDisplayCell:cell forItemAtIndexPath:indexPath];
    }
    fv_enumerateUsingBlock(self.delegates, ^(id<UICollectionViewDelegate> delegate, BOOL * _Nonnull stop) {
        if ([delegate respondsToSelector:@selector(collectionView:willDisplayCell:forItemAtIndexPath:)]) {
            [delegate collectionView:collectionView willDisplayCell:cell forItemAtIndexPath:indexPath];
        }
    });
}

- (void)collectionView:(UICollectionView *)collectionView willDisplaySupplementaryView:(UICollectionReusableView *)view forElementKind:(NSString *)elementKind atIndexPath:(NSIndexPath *)indexPath {
    if ([self.mainTarget respondsToSelector:@selector(collectionView:willDisplaySupplementaryView:forElementKind:atIndexPath:)]) {
        [(id<UICollectionViewDelegate>)self.mainTarget collectionView:collectionView willDisplaySupplementaryView:view forElementKind:elementKind atIndexPath:indexPath];
    }
    fv_enumerateUsingBlock(self.delegates, ^(id<UICollectionViewDelegate> delegate, BOOL * _Nonnull stop) {
        if ([delegate respondsToSelector:@selector(collectionView:willDisplaySupplementaryView:forElementKind:atIndexPath:)]) {
            [delegate collectionView:collectionView willDisplaySupplementaryView:view forElementKind:elementKind atIndexPath:indexPath];
        }
    });
}

- (void)collectionView:(UICollectionView *)collectionView didEndDisplayingCell:(UICollectionViewCell *)cell forItemAtIndexPath:(NSIndexPath *)indexPath {
    if ([self.mainTarget respondsToSelector:@selector(collectionView:didEndDisplayingCell:forItemAtIndexPath:)]) {
        [(id<UICollectionViewDelegate>)self.mainTarget collectionView:collectionView didEndDisplayingCell:cell forItemAtIndexPath:indexPath];
    }
    fv_enumerateUsingBlock(self.delegates, ^(id<UICollectionViewDelegate> delegate, BOOL * _Nonnull stop) {
        if ([delegate respondsToSelector:@selector(collectionView:didEndDisplayingCell:forItemAtIndexPath:)]) {
            [delegate collectionView:collectionView didEndDisplayingCell:cell forItemAtIndexPath:indexPath];
        }
    });
}

- (void)collectionView:(UICollectionView *)collectionView didEndDisplayingSupplementaryView:(UICollectionReusableView *)view forElementOfKind:(NSString *)elementKind atIndexPath:(NSIndexPath *)indexPath {
    if ([self.mainTarget respondsToSelector:@selector(collectionView:didEndDisplayingSupplementaryView:forElementOfKind:atIndexPath:)]) {
        [(id<UICollectionViewDelegate>)self.mainTarget collectionView:collectionView didEndDisplayingSupplementaryView:view forElementOfKind:elementKind atIndexPath:indexPath];
    }
    fv_enumerateUsingBlock(self.delegates, ^(id<UICollectionViewDelegate> delegate, BOOL * _Nonnull stop) {
        if ([delegate respondsToSelector:@selector(collectionView:didEndDisplayingSupplementaryView:forElementOfKind:atIndexPath:)]) {
            [delegate collectionView:collectionView didEndDisplayingSupplementaryView:view forElementOfKind:elementKind atIndexPath:indexPath];
        }
    });
}

#pragma mark -
- (BOOL)respondsToSelector:(SEL)aSelector {
    BOOL respondsToSelector = [super respondsToSelector:aSelector];
    if (respondsToSelector) {
        return YES;
    }
    return [self.mainTarget respondsToSelector:aSelector];
}

- (BOOL)conformsToProtocol:(Protocol *)aProtocol {
    BOOL conformsToProtocol = [super conformsToProtocol:aProtocol];
    if (conformsToProtocol) {
        return YES;
    }
    return [self.mainTarget conformsToProtocol:aProtocol];
}

- (id)forwardingTargetForSelector:(SEL)aSelector {
    return self.mainTarget;
}

// handling unimplemented methods and nil mainTarget
- (void)forwardInvocation:(NSInvocation *)invocation {
    void *nullPointer = NULL;
    [invocation setReturnValue:&nullPointer];
}

// ç±äº target ä¸º weak å¼ç¨ï¼ä¸ UIScrollview ä¼ç¼å­ response çæ¹æ³åè¡¨ï¼è¿å°±æå³çå¨ UIScrollview.delegate åè°çæ¶åï¼target å¯è½å·²ç»åæ nil éæ¾äº
// è¿å¯è½å¯¼è´ UIScrollView å¨ä¸ç¥æçæåµä¸ï¼åè½¬åç±»åéæ¶æ¯ ï¼åæ¬å nil åéæ¶æ¯ä¸ä¼åéå±é©ï¼ä½æ¯æä»¬å·²ç»å°ä»£çæ¿æ¢äºï¼
// è¿éæå ç§æ¹æ¡æ¥è§£å³è¿ä¸ªé®é¢ï¼
// 1. hook object dealloc æ¹æ³ï¼å¨ mainTarget éæ¾çæ¶åï¼é©±å¨ UIScrollview æ´æ°ä»£çä»¥åæ¹æ³ç¼å­ (è¿å¤ªéäº)
// 2. å®ç° -methodSignatureForSelector: & -forwardInvocation:
// å¨ç¬¬äºç§æ¹æ³ä¸ï¼è¿éæ´å¥½çåæ³åºè¯¥æ¯æ°¸è¿è¿åæ­£ç¡®çæ¹æ³ç­¾åï¼å¯¹äºå¤§é¨åç¬¬ä¸æ¹ç»ä»¶çå®ç°ï¼ä¼å¨ -methodSignatureForSelector: æ¹æ³ä¸­ï¼ç´æ¥è¿å [NSObject instanceMethodSignatureForSelector:@selector(init)];
//      ä¾å¦ï¼FLAnimatedImage / IGListKit ç­ï¼è¯¦è§ï¼https://github.com/Flipboard/FLAnimatedImage/blob/76a31aefc645cc09463a62d42c02954a30434d7d/FLAnimatedImage/FLAnimatedImage.m#L786-L807
// å¯¹äºå¤§é¨åæåµä¸ï¼è¿æ ·åæ¯ä¸ä¼æé®é¢çï¼å ä¸ºåªææ²¡æå®ç°çæ¹æ³ä»¥å mainTarget == nil æ¶æä¼èµ°å°è¿é
// ä½æ¯ï¼å¦æè¯¥è½¬åç±» (A) è¢«å¦ä¸ä¸ªè½¬å (B) ç±»åµå¥æææ¶ï¼ä¸ (B) ç´æ¥è·³è¿å®ç° -forwardingTargetForSelector:ï¼èæ¯éè¿æåä¸æ­¥ -methodSignatureForSelector: / -forwardInvocation: æ¥è½¬åäºä»¶
//      B å®ç° Example:
//      - (NSMethodSignature *)methodSignatureForSelector:(SEL)selector {
//           if ([self.mainTarget respondsToSelector:selector]) {
//              return [self.mainTarget methodSignatureForSelector:selector];
//           }
//           return [NSObject instanceMethodSignatureForSelector:@selector(init)];
//      }
//      - (void)forwardInvocation:(NSInvocation *)invocation {
//          if ([self.mainTarget responseToSelector:invocation.selector]) {
//              [invocation invokeWithTarget:self.mainTarget];
//          }
//      }
// è¿ä¼å¯¼è´è½¬åç±» (A) ç´æ¥è·³è¿ -forwardingTargetForSelector:, èµ°å° -methodSignatureForSelector:, ä»èè¿åä¸ä¸ªéè¯¯çæ¹æ³ç­¾å init (returnValue ä¸º @ï¼arguments ä¸º 2 ä¸ª)ï¼ä»èè°ç¨åºé
// è¿éä¼åäºä¸ä¸è¿°ä¸æ¹æ¡æ¶çåæ³, ä½ä»ç¶æ æ³é¿åä»¥ä¸æåµ A è¢« B åµå¥ï¼ä¸ A.mainTarget æ¯ç±»ä¼¼ IGListKit / FLAnimatedImage å®ç°ç Proxy (å¶ä¸­ B ç´æ¥è·³è¿äº -forwardingTargetForSelector:ï¼éè¿æåä¸æ­¥ -methodSignatureForSelector: / -forwardInvocation: æ¥è½¬åäºä»¶)
- (NSMethodSignature *)methodSignatureForSelector:(SEL)selector {
    if ([self.mainTarget respondsToSelector:selector]) {
        return [self.mainTarget methodSignatureForSelector:selector];
    }
    return [NSObject instanceMethodSignatureForSelector:@selector(init)];
}

@end
